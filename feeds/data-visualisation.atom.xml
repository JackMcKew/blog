<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - Data Visualisation</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/data-visualisation.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2020-07-03T00:00:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Interactive Random Walkers with Javascript</title><link href="https://jackmckew.dev/interactive-random-walkers-with-javascript.html" rel="alternate"></link><published>2020-07-03T00:00:00+10:00</published><updated>2020-07-03T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-07-03:/interactive-random-walkers-with-javascript.html</id><summary type="html">&lt;body&gt;&lt;p&gt;Random walks are where randomly-moving objects move around, that's it. The most fascinating part about it is how many seemingly 'patterns' emerge from the random behaviour, and that everyone sees something different in the visualisations. In this post, let's build an interactive random walk visualisation with Javascript. Let's control the …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;Random walks are where randomly-moving objects move around, that's it. The most fascinating part about it is how many seemingly 'patterns' emerge from the random behaviour, and that everyone sees something different in the visualisations. In this post, let's build an interactive random walk visualisation with Javascript. Let's control the number of random walkers, the line thickness of each, the number of directions they can move (eg, 4 as seen in the GIF) and how fast they move.&lt;/p&gt;
&lt;p&gt;If you get a cool pattern out of the visualisation, please share it in the comments!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Random Walkers GIF" class="img-fluid" src="https://jackmckew.dev/img/random-walkers.gif"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Above is GIF for sharing on social media, see the interactive version below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id="controls-container"&gt;&lt;/div&gt;
&lt;div id="canvas-container"&gt;
&lt;canvas height="400" id="random-walk-canvas" style="border: 2px solid grey;" width="400"&gt;
&lt;/canvas&gt;
&lt;/div&gt;
&lt;p&gt;First off let's draft up the steps/concepts we will need to do to get this visualisation to work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare a canvas&lt;/li&gt;
&lt;li&gt;Set the canvas size to be dynamic with the device the user is viewing on&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialise a GUI for the user to change parameters (I recommend &lt;a href="https://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage"&gt;dat.gui&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiate our walkers as objects within an array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Loop over the array, painting each walker on the canvas&lt;/li&gt;
&lt;li&gt;Calculate the next position for each walker&lt;/li&gt;
&lt;li&gt;Rinse repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The source code is provided below with comments which align with the steps above.&lt;/p&gt;
&lt;h2 id="limitations-on-directions"&gt;Limitations on Directions&lt;/h2&gt;
&lt;p&gt;To be able to limit the angles that our walkers can move at, we need some methodology behind this. The concept that is implemented below that was landed on follows the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Divide the total degree of freedom (360) by desired number of directions (eg, 4) &lt;code&gt;desired_number_of_directions = 4&lt;/code&gt;&lt;ol&gt;
&lt;li&gt;This gives us a 'base' angle of 90 &lt;code&gt;base_angle = 360 / 4&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Iterate over the range to the number of directions (eg, [0,1,2,3,4])&lt;/li&gt;
&lt;li&gt;Multiply our base angle by each iteration (eg, &lt;code&gt;2 * 90 = 180&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Push onto a possible directions array (resulting array &lt;code&gt;possible_directions = [0,90,180,270,360]&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;0 &amp;amp; 360 is included in each possible directions array to give the walker a better chance at 'turning around' and staying on the canvas.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="applications-for-random-walk"&gt;Applications for Random Walk&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This is all well and good for making funky pictures, but what can this actually be used for?&lt;/em&gt;&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Finance&lt;/td&gt;
&lt;td&gt;Model share prices &amp;amp; other factors, also known as the &lt;a href="https://en.wikipedia.org/wiki/Random_walk_hypothesis"&gt;random walk hypothesis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Genetics&lt;/td&gt;
&lt;td&gt;Genetic drift, the change in frequency of which genes are passed on or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Physics&lt;/td&gt;
&lt;td&gt;Brownian motion, the movement of molecules in liquid &amp;amp; gases&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ecology&lt;/td&gt;
&lt;td&gt;Model individual animal movements&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are many, many more applications for this, if you'd like to add to this list, leave a comment below!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vladimir Illevski has a number of articles on uses for random walks which you can find at &lt;a href="https://isquared.digital/blog/2020-04-12-random-walk/"&gt;https://isquared.digital/blog/2020-04-12-random-walk/&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Javascript Source(s):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/js/random-walkers.js"&gt;random-walkers.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/js/dat.gui.js"&gt;dat.gui.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSS Source(s):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/css/random-walkers.css"&gt;random-walkers.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;</content><category term="Javascript"></category><category term="javascript"></category><category term="data-viz"></category></entry><entry><title>Simulate Virus Outbreak with Javascript</title><link href="https://jackmckew.dev/simulate-virus-outbreak-with-javascript.html" rel="alternate"></link><published>2020-04-09T00:00:00+10:00</published><updated>2020-04-09T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-04-09:/simulate-virus-outbreak-with-javascript.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will and simulate how viruses can spread throughout a community and implement a variety of different parameters to see how these affect the simulation. This is following on from last week's post on how to do a bouncing ball simulation with the canvas API &lt;a href="https://jackmckew.dev/pelican-and-javascript-bouncing-balls-in-canvas.html"&gt;https://jackmckew.dev/pelican-and-javascript-bouncing-balls-in-canvas …&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will and simulate how viruses can spread throughout a community and implement a variety of different parameters to see how these affect the simulation. This is following on from last week's post on how to do a bouncing ball simulation with the canvas API &lt;a href="https://jackmckew.dev/pelican-and-javascript-bouncing-balls-in-canvas.html"&gt;https://jackmckew.dev/pelican-and-javascript-bouncing-balls-in-canvas.html&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Below is a GIF for sharing on social media, see below for interactive visualisation.
I am not an epidemiologist by any means of the word, this is entirely out of interest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Virus Outbreak GIF" class="img-fluid" src="https://jackmckew.dev/img/virus-outbreak.gif"/&gt;&lt;/p&gt;
&lt;p&gt;Firstly, the extensions that are implemented on top of the bouncing ball simulation are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GUI controls for operating the simulation&lt;/li&gt;
&lt;li&gt;Area chart using Canvas API to show percentage of population healthy/infected/recovered.&lt;/li&gt;
&lt;li&gt;When a red ball hits a blue ball it'll attempt to transmit&lt;/li&gt;
&lt;li&gt;Following a specified period of time, the red ball will turn purple and will no longer transmit to other balls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The controllable elements of the simulation below are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed of balls&lt;/li&gt;
&lt;li&gt;Size (radius) of balls&lt;/li&gt;
&lt;li&gt;Number of balls allowed to move at any point in time&lt;ul&gt;
&lt;li&gt;Simulate the effect of a lock down in the midst of outbreak&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chance to transmit&lt;ul&gt;
&lt;li&gt;Great for showing the effects of viruses if there is only a chance to transmit between population.&lt;ul&gt;
&lt;li&gt;Respirators are normally named after their filter efficiency (eg, N95 is 95% efficient at collecting a specific size particle).&lt;/li&gt;
&lt;li&gt;If you set the chance to transmit 5 (95% chance to block) then you'll simulate if everyone in a population wore a mask.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time to recover&lt;ul&gt;
&lt;li&gt;Simulate if a virus took a different amount of time before recovering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try the simulation out below and please comment any setting combinations you found interesting or if you have any more interesting parameters to simulate!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The simulation depends on the size of the screen that you are looking at on this post, change some variables to see the impact!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id="simulation-block"&gt;
&lt;div id="tickers"&gt;
&lt;p id="timer"&gt;&lt;/p&gt;
&lt;p id="infected_count"&gt;&lt;/p&gt;
&lt;p id="healthy_count"&gt;&lt;/p&gt;
&lt;p id="recovered_count"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id="summary-block"&gt;
&lt;div id="controls-container"&gt;&lt;/div&gt;
&lt;canvas height="200" id="area_chart" style="border: 2px solid grey;" width="400"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;div id="ball-container"&gt;
&lt;canvas height="400" id="mycanvas" style="border: 2px solid grey;" width="800"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Javascript Source(s):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/js/virus_part_1.js"&gt;virus_part_1.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/js/dat.gui.js"&gt;dat.gui.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSS Source(s):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/css/virus_part_1.css"&gt;virus_part_1.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;</content><category term="Javascript"></category><category term="javascript"></category><category term="data-viz"></category></entry><entry><title>Pelican and Javascript - Bouncing Balls in Canvas</title><link href="https://jackmckew.dev/pelican-and-javascript-bouncing-balls-in-canvas.html" rel="alternate"></link><published>2020-04-02T00:00:00+11:00</published><updated>2020-04-02T00:00:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-04-02:/pelican-and-javascript-bouncing-balls-in-canvas.html</id><summary type="html">&lt;body&gt;&lt;p&gt;Today let's look into building a visualisation of some bouncing balls with Javascript. The inspiration for building this comes from &lt;a href="https://www.washingtonpost.com/people/harry-stevens/"&gt;Harry Stevens&lt;/a&gt; over at the Washington Post for his amazing piece of data journalism around the &lt;a href="https://www.washingtonpost.com/graphics/2020/world/corona-simulator/"&gt;coronavirus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a gif of the current version of my bouncing balls using …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;Today let's look into building a visualisation of some bouncing balls with Javascript. The inspiration for building this comes from &lt;a href="https://www.washingtonpost.com/people/harry-stevens/"&gt;Harry Stevens&lt;/a&gt; over at the Washington Post for his amazing piece of data journalism around the &lt;a href="https://www.washingtonpost.com/graphics/2020/world/corona-simulator/"&gt;coronavirus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a gif of the current version of my bouncing balls using the Canvas API:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bouncing Balls GIF" class="img-fluid" src="https://jackmckew.dev/img/bouncing_balls.gif"/&gt;&lt;/p&gt;
&lt;p&gt;As soon as I read that article personally, I thought of a few ways to extend the analysis, and such this post was born. A few of the ideas that I've had are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding a 'chance' to transmit the infection (eg, 50% of all collisions transmit). This could be a symbolic way of seeing how much of an impact wearing PPE makes on virus outbreaks.&lt;/li&gt;
&lt;li&gt;Having hot spots in which the circles will be attracted towards.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you've got any ideas of some new parameters that might be interesting to see, leave a comment!&lt;/p&gt;
&lt;p&gt;Before I could build a similar visualisation, I had to figure out how I could integrate Javascript into this blog. Luckily, the amazing community behind Pelican has built a plethora of plugins to choose from.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mortada/pelican_javascript"&gt;Pelican Javascript&lt;/a&gt; ended up being the plugin of choice. By using this in combination with &lt;a href="https://github.com/AlexJF/pelican-autostatic"&gt;Pelican Autostatic&lt;/a&gt;, this allowed for the article-centric resources and also ensures that a list of source javascript files was included at the end of each post.&lt;/p&gt;
&lt;p&gt;Without further ado, here is my current implementation of bouncing balls. There is a few bugs in that sometimes they fly out of the box and some get stuck together forever, if anyone has any ideas on how I could fix it, please let me know in the comments!&lt;/p&gt;
&lt;canvas height="400" id="mycanvas" style="border:1px solid grey;" width="400"&gt;&lt;/canvas&gt;
&lt;p&gt;This visualisation is completed using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt;. To interface with the canvas element in HTML, we use the &lt;a href="https://www.w3schools.com/whatis/whatis_htmldom.asp"&gt;DOM&lt;/a&gt;. Another option of doing this is using &lt;a href="https://d3js.org/"&gt;d3js&lt;/a&gt;, for which my understanding is that since Canvas is inbuilt, it is much more powerful at painting more objects.&lt;/p&gt;
&lt;p&gt;We then instantiate an amount of objects (which will be the balls) within Javascript with the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;radius&lt;/li&gt;
&lt;li&gt;angle&lt;/li&gt;
&lt;li&gt;speed&lt;/li&gt;
&lt;li&gt;colour&lt;/li&gt;
&lt;li&gt;position&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are then all pushed into an array for which we will loop through checking collision with horizontal walls, vertical walls and the other balls.&lt;/p&gt;
&lt;p&gt;To have a visualisation which moves along with time, we can use the &lt;a href="https://www.w3schools.com/whatis/whatis_htmldom.asp"&gt;setInterval&lt;/a&gt; method (which is apart of the Window object aka the browser). We will be painting the canvas at each interval that we have set with this method.&lt;/p&gt;
&lt;p&gt;Now we need to paint our canvas with the balls. To do this, we start by clearing the canvas each time, so the last 'timestamp' doesn't stay on our canvas (unless you want to?). The balls are then painted onto the canvas using the &lt;a href="https://www.w3schools.com/tags/canvas_arc.asp"&gt;canvas arc() Method&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At each time step, we need to do a series of steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clear the canvas (using &lt;a href="https://www.w3schools.com/tags/canvas_clearrect.asp"&gt;canvas clearRect() Method&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The following steps are applied to each individual ball.&lt;/li&gt;
&lt;li&gt;Check if the ball is colliding with the walls or another ball.&lt;ol&gt;
&lt;li&gt;If they are, reflect them accordingly. (Since our balls are all the same 'weight', we use a &lt;a href="http://hyperphysics.phy-astr.gsu.edu/hbase/colsta.html"&gt;mass elastic collision&lt;/a&gt;, which means both balls angle will be rotated by 90 degrees.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Move our ball according to the angle it is facing, by it's speed.&lt;/li&gt;
&lt;li&gt;Paint the ball on canvas.&lt;/li&gt;
&lt;li&gt;Repeat for all balls.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Javascript Source(s):
&lt;a href="https://jackmckew.dev/js/bouncing_balls.js"&gt;Bouncing_Balls.js&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</content><category term="Javascript"></category><category term="javascript"></category><category term="data-viz"></category></entry></feed>