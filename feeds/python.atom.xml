<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - Python</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/python.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2021-01-08T00:00:00+11:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Typography With Matplotlib</title><link href="https://jackmckew.dev/typography-with-matplotlib.html" rel="alternate"></link><published>2021-01-08T00:00:00+11:00</published><updated>2021-01-08T00:00:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2021-01-08:/typography-with-matplotlib.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;Typography is 'the style and appearance of printed matter', so in this post we're going to make some typography art with &lt;code&gt;Matplotlib&lt;/code&gt;, we're going to make use of some text and colour the words which are colours themmselves (eg, the colour red will be coloured red). This is an interesting …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;Typography is 'the style and appearance of printed matter', so in this post we're going to make some typography art with &lt;code&gt;Matplotlib&lt;/code&gt;, we're going to make use of some text and colour the words which are colours themmselves (eg, the colour red will be coloured red). This is an interesting dive into how to structure data to be processed. Before we get into how to create this, let's take a look at the output!&lt;/p&gt;
&lt;p&gt;&lt;img alt="typography output" class="img-fluid" src="https://jackmckew.dev/img/typography.png"/&gt;&lt;/p&gt;
&lt;p&gt;Now to create the above image, we need some text, and that text would hopefully make use of worded colours more than once and in different colors. This site has lots of great examples, and we shall take an excerpt out of it &lt;a href="https://www.shortparagraph.com/paragraphs/paragraph-on-the-meaning-of-colours-by-anand/3221"&gt;https://www.shortparagraph.com/paragraphs/paragraph-on-the-meaning-of-colours-by-anand/3221&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To start off, we use a triple out, which denotes a multiline string in Python, this let's us use newlines (the enter key) throughout a single string.&lt;/p&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;example_sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;Colors affect the culture of a nation and they vary with time and place. Taking an example, the Americans consider the yellow red and green color chain to be good whereas in Japan, greens and blue are considered good and red and purple are bad. Green is the dominant color in Mongolia. It might be a sign of their appreciation towards the nature and fauna.&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Next up we need to import the dependancies of packages we wish to use (&lt;code&gt;matplotlib&lt;/code&gt;). To make our lives even easier, there's a list of named colours inbuilt into &lt;code&gt;matplotlib&lt;/code&gt;! To see them all, head to &lt;a href="https://matplotlib.org/3.1.0/gallery/color/named_colors.html"&gt;https://matplotlib.org/3.1.0/gallery/color/named_colors.html&lt;/a&gt;. We're going to make use of the CSS colours in this directory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.colors&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mcolors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Next we create a function that's going to analyse all the words in the text, determine if the named colour exists (even in the substring), and create a new list of same length as the number of words that we will use to colour them later on. We split the text by spaces to create a list where each element in the list is a string of the single word, and initilise two lists that we will fill. We iterate over each word, and check if the named colour exists in the substring, if it does then we append that colour into the colour list, if not then we give it a fall back colour (defaults to black for a white canvas). Finally the function returns both the lists in a tuple which we can extract from the function return.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_color_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color_dictionary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;base_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;split_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;color_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;color_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color_list&lt;/span&gt;

&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_color_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example_sentence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CSS4_COLORS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'white'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;['the', 'yellow', 'red', 'and', 'green']
['white', 'yellow', 'red', 'white', 'green']
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Next we need to take these two lists to construct our typography art. We create a function that initialises a canvas, iterates over our two lists (with zip), and word by word places them on the canvas with the colour specified, finally returning the canvas that could be used in a figure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_colored_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_diff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_renderer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;original_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'left'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;transf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inverted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_window_extent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transformed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xmax&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xmin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w_limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_w&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y_diff&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now we've got a canvas, it's time to plot!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_facecolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'off'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plot_colored_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_svg output_subarea"&gt;
&lt;!--?xml version="1.0" encoding="utf-8" standalone="no"?--&gt;


&lt;!-- Created with matplotlib (https://matplotlib.org/) --&gt;
&lt;svg height="254.32575pt" version="1.1" viewBox="0 0 237.6 254.32575" width="237.6pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;metadata&gt;
&lt;rdf:rdf xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
&lt;cc:work&gt;
&lt;dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"&gt;&lt;/dc:type&gt;
&lt;dc:date&gt;2020-10-29T19:54:48.230788&lt;/dc:date&gt;
&lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
&lt;dc:creator&gt;
&lt;cc:agent&gt;
&lt;dc:title&gt;Matplotlib v3.3.2, https://matplotlib.org/&lt;/dc:title&gt;
&lt;/cc:agent&gt;
&lt;/dc:creator&gt;
&lt;/cc:work&gt;
&lt;/rdf:rdf&gt;
&lt;/metadata&gt;
&lt;defs&gt;
&lt;style type="text/css"&gt;*{stroke-linecap:butt;stroke-linejoin:round;}&lt;/style&gt;
&lt;/defs&gt;
&lt;g id="figure_1"&gt;
&lt;g id="patch_1"&gt;
&lt;path d="M 0 254.32575 
L 237.6 254.32575 
L 237.6 0 
L 0 0 
z
"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="axes_1"&gt;
&lt;g id="text_1"&gt;
&lt;!-- Colors --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 16.318125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 64.40625 67.28125 
L 64.40625 56.890625 
Q 59.421875 61.53125 53.78125 63.8125 
Q 48.140625 66.109375 41.796875 66.109375 
Q 29.296875 66.109375 22.65625 58.46875 
Q 16.015625 50.828125 16.015625 36.375 
Q 16.015625 21.96875 22.65625 14.328125 
Q 29.296875 6.6875 41.796875 6.6875 
Q 48.140625 6.6875 53.78125 8.984375 
Q 59.421875 11.28125 64.40625 15.921875 
L 64.40625 5.609375 
Q 59.234375 2.09375 53.4375 0.328125 
Q 47.65625 -1.421875 41.21875 -1.421875 
Q 24.65625 -1.421875 15.125 8.703125 
Q 5.609375 18.84375 5.609375 36.375 
Q 5.609375 53.953125 15.125 64.078125 
Q 24.65625 74.21875 41.21875 74.21875 
Q 47.75 74.21875 53.53125 72.484375 
Q 59.328125 70.75 64.40625 67.28125 
z
" id="DejaVuSans-67"&gt;&lt;/path&gt;
&lt;path d="M 30.609375 48.390625 
Q 23.390625 48.390625 19.1875 42.75 
Q 14.984375 37.109375 14.984375 27.296875 
Q 14.984375 17.484375 19.15625 11.84375 
Q 23.34375 6.203125 30.609375 6.203125 
Q 37.796875 6.203125 41.984375 11.859375 
Q 46.1875 17.53125 46.1875 27.296875 
Q 46.1875 37.015625 41.984375 42.703125 
Q 37.796875 48.390625 30.609375 48.390625 
z
M 30.609375 56 
Q 42.328125 56 49.015625 48.375 
Q 55.71875 40.765625 55.71875 27.296875 
Q 55.71875 13.875 49.015625 6.21875 
Q 42.328125 -1.421875 30.609375 -1.421875 
Q 18.84375 -1.421875 12.171875 6.21875 
Q 5.515625 13.875 5.515625 27.296875 
Q 5.515625 40.765625 12.171875 48.375 
Q 18.84375 56 30.609375 56 
z
" id="DejaVuSans-111"&gt;&lt;/path&gt;
&lt;path d="M 9.421875 75.984375 
L 18.40625 75.984375 
L 18.40625 0 
L 9.421875 0 
z
" id="DejaVuSans-108"&gt;&lt;/path&gt;
&lt;path d="M 41.109375 46.296875 
Q 39.59375 47.171875 37.8125 47.578125 
Q 36.03125 48 33.890625 48 
Q 26.265625 48 22.1875 43.046875 
Q 18.109375 38.09375 18.109375 28.8125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 20.953125 51.171875 25.484375 53.578125 
Q 30.03125 56 36.53125 56 
Q 37.453125 56 38.578125 55.875 
Q 39.703125 55.765625 41.0625 55.515625 
z
" id="DejaVuSans-114"&gt;&lt;/path&gt;
&lt;path d="M 44.28125 53.078125 
L 44.28125 44.578125 
Q 40.484375 46.53125 36.375 47.5 
Q 32.28125 48.484375 27.875 48.484375 
Q 21.1875 48.484375 17.84375 46.4375 
Q 14.5 44.390625 14.5 40.28125 
Q 14.5 37.15625 16.890625 35.375 
Q 19.28125 33.59375 26.515625 31.984375 
L 29.59375 31.296875 
Q 39.15625 29.25 43.1875 25.515625 
Q 47.21875 21.78125 47.21875 15.09375 
Q 47.21875 7.46875 41.1875 3.015625 
Q 35.15625 -1.421875 24.609375 -1.421875 
Q 20.21875 -1.421875 15.453125 -0.5625 
Q 10.6875 0.296875 5.421875 2 
L 5.421875 11.28125 
Q 10.40625 8.6875 15.234375 7.390625 
Q 20.0625 6.109375 24.8125 6.109375 
Q 31.15625 6.109375 34.5625 8.28125 
Q 37.984375 10.453125 37.984375 14.40625 
Q 37.984375 18.0625 35.515625 20.015625 
Q 33.0625 21.96875 24.703125 23.78125 
L 21.578125 24.515625 
Q 13.234375 26.265625 9.515625 29.90625 
Q 5.8125 33.546875 5.8125 39.890625 
Q 5.8125 47.609375 11.28125 51.796875 
Q 16.75 56 26.8125 56 
Q 31.78125 56 36.171875 55.265625 
Q 40.578125 54.546875 44.28125 53.078125 
z
" id="DejaVuSans-115"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-67"&gt;&lt;/use&gt;
&lt;use x="69.824219" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="131.005859" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="158.789062" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="219.970703" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="261.083984" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_2"&gt;
&lt;!-- affect --&gt;
&lt;g style="fill:#ffffff;" transform="translate(91.722 16.318125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 34.28125 27.484375 
Q 23.390625 27.484375 19.1875 25 
Q 14.984375 22.515625 14.984375 16.5 
Q 14.984375 11.71875 18.140625 8.90625 
Q 21.296875 6.109375 26.703125 6.109375 
Q 34.1875 6.109375 38.703125 11.40625 
Q 43.21875 16.703125 43.21875 25.484375 
L 43.21875 27.484375 
z
M 52.203125 31.203125 
L 52.203125 0 
L 43.21875 0 
L 43.21875 8.296875 
Q 40.140625 3.328125 35.546875 0.953125 
Q 30.953125 -1.421875 24.3125 -1.421875 
Q 15.921875 -1.421875 10.953125 3.296875 
Q 6 8.015625 6 15.921875 
Q 6 25.140625 12.171875 29.828125 
Q 18.359375 34.515625 30.609375 34.515625 
L 43.21875 34.515625 
L 43.21875 35.40625 
Q 43.21875 41.609375 39.140625 45 
Q 35.0625 48.390625 27.6875 48.390625 
Q 23 48.390625 18.546875 47.265625 
Q 14.109375 46.140625 10.015625 43.890625 
L 10.015625 52.203125 
Q 14.9375 54.109375 19.578125 55.046875 
Q 24.21875 56 28.609375 56 
Q 40.484375 56 46.34375 49.84375 
Q 52.203125 43.703125 52.203125 31.203125 
z
" id="DejaVuSans-97"&gt;&lt;/path&gt;
&lt;path d="M 37.109375 75.984375 
L 37.109375 68.5 
L 28.515625 68.5 
Q 23.6875 68.5 21.796875 66.546875 
Q 19.921875 64.59375 19.921875 59.515625 
L 19.921875 54.6875 
L 34.71875 54.6875 
L 34.71875 47.703125 
L 19.921875 47.703125 
L 19.921875 0 
L 10.890625 0 
L 10.890625 47.703125 
L 2.296875 47.703125 
L 2.296875 54.6875 
L 10.890625 54.6875 
L 10.890625 58.5 
Q 10.890625 67.625 15.140625 71.796875 
Q 19.390625 75.984375 28.609375 75.984375 
z
" id="DejaVuSans-102"&gt;&lt;/path&gt;
&lt;path d="M 56.203125 29.59375 
L 56.203125 25.203125 
L 14.890625 25.203125 
Q 15.484375 15.921875 20.484375 11.0625 
Q 25.484375 6.203125 34.421875 6.203125 
Q 39.59375 6.203125 44.453125 7.46875 
Q 49.3125 8.734375 54.109375 11.28125 
L 54.109375 2.78125 
Q 49.265625 0.734375 44.1875 -0.34375 
Q 39.109375 -1.421875 33.890625 -1.421875 
Q 20.796875 -1.421875 13.15625 6.1875 
Q 5.515625 13.8125 5.515625 26.8125 
Q 5.515625 40.234375 12.765625 48.109375 
Q 20.015625 56 32.328125 56 
Q 43.359375 56 49.78125 48.890625 
Q 56.203125 41.796875 56.203125 29.59375 
z
M 47.21875 32.234375 
Q 47.125 39.59375 43.09375 43.984375 
Q 39.0625 48.390625 32.421875 48.390625 
Q 24.90625 48.390625 20.390625 44.140625 
Q 15.875 39.890625 15.1875 32.171875 
z
" id="DejaVuSans-101"&gt;&lt;/path&gt;
&lt;path d="M 48.78125 52.59375 
L 48.78125 44.1875 
Q 44.96875 46.296875 41.140625 47.34375 
Q 37.3125 48.390625 33.40625 48.390625 
Q 24.65625 48.390625 19.8125 42.84375 
Q 14.984375 37.3125 14.984375 27.296875 
Q 14.984375 17.28125 19.8125 11.734375 
Q 24.65625 6.203125 33.40625 6.203125 
Q 37.3125 6.203125 41.140625 7.25 
Q 44.96875 8.296875 48.78125 10.40625 
L 48.78125 2.09375 
Q 45.015625 0.34375 40.984375 -0.53125 
Q 36.96875 -1.421875 32.421875 -1.421875 
Q 20.0625 -1.421875 12.78125 6.34375 
Q 5.515625 14.109375 5.515625 27.296875 
Q 5.515625 40.671875 12.859375 48.328125 
Q 20.21875 56 33.015625 56 
Q 37.15625 56 41.109375 55.140625 
Q 45.0625 54.296875 48.78125 52.59375 
z
" id="DejaVuSans-99"&gt;&lt;/path&gt;
&lt;path d="M 18.3125 70.21875 
L 18.3125 54.6875 
L 36.8125 54.6875 
L 36.8125 47.703125 
L 18.3125 47.703125 
L 18.3125 18.015625 
Q 18.3125 11.328125 20.140625 9.421875 
Q 21.96875 7.515625 27.59375 7.515625 
L 36.8125 7.515625 
L 36.8125 0 
L 27.59375 0 
Q 17.1875 0 13.234375 3.875 
Q 9.28125 7.765625 9.28125 18.015625 
L 9.28125 47.703125 
L 2.6875 47.703125 
L 2.6875 54.6875 
L 9.28125 54.6875 
L 9.28125 70.21875 
z
" id="DejaVuSans-116"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-102"&gt;&lt;/use&gt;
&lt;use x="96.484375" xlink:href="#DejaVuSans-102"&gt;&lt;/use&gt;
&lt;use x="131.689453" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="193.212891" xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="248.193359" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_3"&gt;
&lt;!-- the --&gt;
&lt;g style="fill:#ffffff;" transform="translate(128.679 16.318125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 54.890625 33.015625 
L 54.890625 0 
L 45.90625 0 
L 45.90625 32.71875 
Q 45.90625 40.484375 42.875 44.328125 
Q 39.84375 48.1875 33.796875 48.1875 
Q 26.515625 48.1875 22.3125 43.546875 
Q 18.109375 38.921875 18.109375 30.90625 
L 18.109375 0 
L 9.078125 0 
L 9.078125 75.984375 
L 18.109375 75.984375 
L 18.109375 46.1875 
Q 21.34375 51.125 25.703125 53.5625 
Q 30.078125 56 35.796875 56 
Q 45.21875 56 50.046875 50.171875 
Q 54.890625 44.34375 54.890625 33.015625 
z
" id="DejaVuSans-104"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="102.587891" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_4"&gt;
&lt;!-- culture --&gt;
&lt;g style="fill:#ffffff;" transform="translate(150.711 16.318125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 8.5 21.578125 
L 8.5 54.6875 
L 17.484375 54.6875 
L 17.484375 21.921875 
Q 17.484375 14.15625 20.5 10.265625 
Q 23.53125 6.390625 29.59375 6.390625 
Q 36.859375 6.390625 41.078125 11.03125 
Q 45.3125 15.671875 45.3125 23.6875 
L 45.3125 54.6875 
L 54.296875 54.6875 
L 54.296875 0 
L 45.3125 0 
L 45.3125 8.40625 
Q 42.046875 3.421875 37.71875 1 
Q 33.40625 -1.421875 27.6875 -1.421875 
Q 18.265625 -1.421875 13.375 4.4375 
Q 8.5 10.296875 8.5 21.578125 
z
M 31.109375 56 
z
" id="DejaVuSans-117"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="54.980469" xlink:href="#DejaVuSans-117"&gt;&lt;/use&gt;
&lt;use x="118.359375" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="146.142578" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="185.351562" xlink:href="#DejaVuSans-117"&gt;&lt;/use&gt;
&lt;use x="248.730469" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="287.59375" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_5"&gt;
&lt;!-- of --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 32.626125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="61.181641" xlink:href="#DejaVuSans-102"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_6"&gt;
&lt;!-- a --&gt;
&lt;g style="fill:#ffffff;" transform="translate(65.697 32.626125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_7"&gt;
&lt;!-- nation --&gt;
&lt;g style="fill:#ffffff;" transform="translate(75.354 32.626125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 54.890625 33.015625 
L 54.890625 0 
L 45.90625 0 
L 45.90625 32.71875 
Q 45.90625 40.484375 42.875 44.328125 
Q 39.84375 48.1875 33.796875 48.1875 
Q 26.515625 48.1875 22.3125 43.546875 
Q 18.109375 38.921875 18.109375 30.90625 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 21.34375 51.125 25.703125 53.5625 
Q 30.078125 56 35.796875 56 
Q 45.21875 56 50.046875 50.171875 
Q 54.890625 44.34375 54.890625 33.015625 
z
" id="DejaVuSans-110"&gt;&lt;/path&gt;
&lt;path d="M 9.421875 54.6875 
L 18.40625 54.6875 
L 18.40625 0 
L 9.421875 0 
z
M 9.421875 75.984375 
L 18.40625 75.984375 
L 18.40625 64.59375 
L 9.421875 64.59375 
z
" id="DejaVuSans-105"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="63.378906" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="163.867188" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="191.650391" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="252.832031" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_8"&gt;
&lt;!-- and --&gt;
&lt;g style="fill:#ffffff;" transform="translate(115.686 32.626125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 45.40625 46.390625 
L 45.40625 75.984375 
L 54.390625 75.984375 
L 54.390625 0 
L 45.40625 0 
L 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
z
M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
" id="DejaVuSans-100"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_9"&gt;
&lt;!-- they --&gt;
&lt;g style="fill:#ffffff;" transform="translate(140.643 32.626125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 32.171875 -5.078125 
Q 28.375 -14.84375 24.75 -17.8125 
Q 21.140625 -20.796875 15.09375 -20.796875 
L 7.90625 -20.796875 
L 7.90625 -13.28125 
L 13.1875 -13.28125 
Q 16.890625 -13.28125 18.9375 -11.515625 
Q 21 -9.765625 23.484375 -3.21875 
L 25.09375 0.875 
L 2.984375 54.6875 
L 12.5 54.6875 
L 29.59375 11.921875 
L 46.6875 54.6875 
L 56.203125 54.6875 
z
" id="DejaVuSans-121"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="102.587891" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="164.111328" xlink:href="#DejaVuSans-121"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_10"&gt;
&lt;!-- vary --&gt;
&lt;g style="fill:#ffffff;" transform="translate(169.8 32.626125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 2.984375 54.6875 
L 12.5 54.6875 
L 29.59375 8.796875 
L 46.6875 54.6875 
L 56.203125 54.6875 
L 35.6875 0 
L 23.484375 0 
z
" id="DejaVuSans-118"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-118"&gt;&lt;/use&gt;
&lt;use x="59.179688" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="120.458984" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="161.572266" xlink:href="#DejaVuSans-121"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_11"&gt;
&lt;!-- with --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 48.934125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 4.203125 54.6875 
L 13.1875 54.6875 
L 24.421875 12.015625 
L 35.59375 54.6875 
L 46.1875 54.6875 
L 57.421875 12.015625 
L 68.609375 54.6875 
L 77.59375 54.6875 
L 63.28125 0 
L 52.6875 0 
L 40.921875 44.828125 
L 29.109375 0 
L 18.5 0 
z
" id="DejaVuSans-119"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-119"&gt;&lt;/use&gt;
&lt;use x="81.787109" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="109.570312" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="148.779297" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_12"&gt;
&lt;!-- time --&gt;
&lt;g style="fill:#ffffff;" transform="translate(79.572 48.934125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 52 44.1875 
Q 55.375 50.25 60.0625 53.125 
Q 64.75 56 71.09375 56 
Q 79.640625 56 84.28125 50.015625 
Q 88.921875 44.046875 88.921875 33.015625 
L 88.921875 0 
L 79.890625 0 
L 79.890625 32.71875 
Q 79.890625 40.578125 77.09375 44.375 
Q 74.3125 48.1875 68.609375 48.1875 
Q 61.625 48.1875 57.5625 43.546875 
Q 53.515625 38.921875 53.515625 30.90625 
L 53.515625 0 
L 44.484375 0 
L 44.484375 32.71875 
Q 44.484375 40.625 41.703125 44.40625 
Q 38.921875 48.1875 33.109375 48.1875 
Q 26.21875 48.1875 22.15625 43.53125 
Q 18.109375 38.875 18.109375 30.90625 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 21.1875 51.21875 25.484375 53.609375 
Q 29.78125 56 35.6875 56 
Q 41.65625 56 45.828125 52.96875 
Q 50 49.953125 52 44.1875 
z
" id="DejaVuSans-109"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="66.992188" xlink:href="#DejaVuSans-109"&gt;&lt;/use&gt;
&lt;use x="164.404297" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_13"&gt;
&lt;!-- and --&gt;
&lt;g style="fill:#ffffff;" transform="translate(109.029 48.934125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_14"&gt;
&lt;!-- place. --&gt;
&lt;g style="fill:#ffffff;" transform="translate(133.986 48.934125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 18.109375 8.203125 
L 18.109375 -20.796875 
L 9.078125 -20.796875 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.390625 
Q 20.953125 51.265625 25.265625 53.625 
Q 29.59375 56 35.59375 56 
Q 45.5625 56 51.78125 48.09375 
Q 58.015625 40.1875 58.015625 27.296875 
Q 58.015625 14.40625 51.78125 6.484375 
Q 45.5625 -1.421875 35.59375 -1.421875 
Q 29.59375 -1.421875 25.265625 0.953125 
Q 20.953125 3.328125 18.109375 8.203125 
z
M 48.6875 27.296875 
Q 48.6875 37.203125 44.609375 42.84375 
Q 40.53125 48.484375 33.40625 48.484375 
Q 26.265625 48.484375 22.1875 42.84375 
Q 18.109375 37.203125 18.109375 27.296875 
Q 18.109375 17.390625 22.1875 11.75 
Q 26.265625 6.109375 33.40625 6.109375 
Q 40.53125 6.109375 44.609375 11.75 
Q 48.6875 17.390625 48.6875 27.296875 
z
" id="DejaVuSans-112"&gt;&lt;/path&gt;
&lt;path d="M 10.6875 12.40625 
L 21 12.40625 
L 21 0 
L 10.6875 0 
z
" id="DejaVuSans-46"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-112"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="91.259766" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="152.539062" xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="207.519531" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="269.042969" xlink:href="#DejaVuSans-46"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_15"&gt;
&lt;!-- Taking --&gt;
&lt;g style="fill:#ffffff;" transform="translate(172.368 48.934125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M -0.296875 72.90625 
L 61.375 72.90625 
L 61.375 64.59375 
L 35.5 64.59375 
L 35.5 0 
L 25.59375 0 
L 25.59375 64.59375 
L -0.296875 64.59375 
z
" id="DejaVuSans-84"&gt;&lt;/path&gt;
&lt;path d="M 9.078125 75.984375 
L 18.109375 75.984375 
L 18.109375 31.109375 
L 44.921875 54.6875 
L 56.390625 54.6875 
L 27.390625 29.109375 
L 57.625 0 
L 45.90625 0 
L 18.109375 26.703125 
L 18.109375 0 
L 9.078125 0 
z
" id="DejaVuSans-107"&gt;&lt;/path&gt;
&lt;path d="M 45.40625 27.984375 
Q 45.40625 37.75 41.375 43.109375 
Q 37.359375 48.484375 30.078125 48.484375 
Q 22.859375 48.484375 18.828125 43.109375 
Q 14.796875 37.75 14.796875 27.984375 
Q 14.796875 18.265625 18.828125 12.890625 
Q 22.859375 7.515625 30.078125 7.515625 
Q 37.359375 7.515625 41.375 12.890625 
Q 45.40625 18.265625 45.40625 27.984375 
z
M 54.390625 6.78125 
Q 54.390625 -7.171875 48.1875 -13.984375 
Q 42 -20.796875 29.203125 -20.796875 
Q 24.46875 -20.796875 20.265625 -20.09375 
Q 16.0625 -19.390625 12.109375 -17.921875 
L 12.109375 -9.1875 
Q 16.0625 -11.328125 19.921875 -12.34375 
Q 23.78125 -13.375 27.78125 -13.375 
Q 36.625 -13.375 41.015625 -8.765625 
Q 45.40625 -4.15625 45.40625 5.171875 
L 45.40625 9.625 
Q 42.625 4.78125 38.28125 2.390625 
Q 33.9375 0 27.875 0 
Q 17.828125 0 11.671875 7.65625 
Q 5.515625 15.328125 5.515625 27.984375 
Q 5.515625 40.671875 11.671875 48.328125 
Q 17.828125 56 27.875 56 
Q 33.9375 56 38.28125 53.609375 
Q 42.625 51.21875 45.40625 46.390625 
L 45.40625 54.6875 
L 54.390625 54.6875 
z
" id="DejaVuSans-103"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-84"&gt;&lt;/use&gt;
&lt;use x="44.583984" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="105.863281" xlink:href="#DejaVuSans-107"&gt;&lt;/use&gt;
&lt;use x="163.773438" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="191.556641" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="254.935547" xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_16"&gt;
&lt;!-- an --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 65.242125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_17"&gt;
&lt;!-- example, --&gt;
&lt;g style="fill:#ffffff;" transform="translate(69.147 65.242125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 54.890625 54.6875 
L 35.109375 28.078125 
L 55.90625 0 
L 45.3125 0 
L 29.390625 21.484375 
L 13.484375 0 
L 2.875 0 
L 24.125 28.609375 
L 4.6875 54.6875 
L 15.28125 54.6875 
L 29.78125 35.203125 
L 44.28125 54.6875 
z
" id="DejaVuSans-120"&gt;&lt;/path&gt;
&lt;path d="M 11.71875 12.40625 
L 22.015625 12.40625 
L 22.015625 4 
L 14.015625 -11.625 
L 7.71875 -11.625 
L 11.71875 4 
z
" id="DejaVuSans-44"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="59.773438" xlink:href="#DejaVuSans-120"&gt;&lt;/use&gt;
&lt;use x="118.953125" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="180.232422" xlink:href="#DejaVuSans-109"&gt;&lt;/use&gt;
&lt;use x="277.644531" xlink:href="#DejaVuSans-112"&gt;&lt;/use&gt;
&lt;use x="341.121094" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="368.904297" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="430.427734" xlink:href="#DejaVuSans-44"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_18"&gt;
&lt;!-- the --&gt;
&lt;g style="fill:#ffffff;" transform="translate(127.104 65.242125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="102.587891" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_19"&gt;
&lt;!-- Americans --&gt;
&lt;g style="fill:#ffffff;" transform="translate(149.136 65.242125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 34.1875 63.1875 
L 20.796875 26.90625 
L 47.609375 26.90625 
z
M 28.609375 72.90625 
L 39.796875 72.90625 
L 67.578125 0 
L 57.328125 0 
L 50.6875 18.703125 
L 17.828125 18.703125 
L 11.1875 0 
L 0.78125 0 
z
" id="DejaVuSans-65"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-65"&gt;&lt;/use&gt;
&lt;use x="68.408203" xlink:href="#DejaVuSans-109"&gt;&lt;/use&gt;
&lt;use x="165.820312" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="227.34375" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="268.457031" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="296.240234" xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="351.220703" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="412.5" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="475.878906" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_20"&gt;
&lt;!-- consider --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 81.550125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="54.980469" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="116.162109" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="179.541016" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;use x="231.640625" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="259.423828" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;use x="322.900391" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="384.423828" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_21"&gt;
&lt;!-- the --&gt;
&lt;g style="fill:#ffffff;" transform="translate(105.297 81.550125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="102.587891" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_22"&gt;
&lt;!-- yellow --&gt;
&lt;g style="fill:#ffff00;" transform="translate(127.329 81.550125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-121"&gt;&lt;/use&gt;
&lt;use x="59.179688" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="120.703125" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="148.486328" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="176.269531" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="237.451172" xlink:href="#DejaVuSans-119"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_23"&gt;
&lt;!-- red --&gt;
&lt;g style="fill:#ff0000;" transform="translate(167.886 81.550125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="38.863281" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="100.386719" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_24"&gt;
&lt;!-- and --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 97.858125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_25"&gt;
&lt;!-- green --&gt;
&lt;g style="fill:#008000;" transform="translate(76.797 97.858125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="102.339844" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="163.863281" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="225.386719" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_26"&gt;
&lt;!-- color --&gt;
&lt;g style="fill:#ffffff;" transform="translate(113.904 97.858125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="54.980469" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="116.162109" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="143.945312" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="205.126953" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_27"&gt;
&lt;!-- chain --&gt;
&lt;g style="fill:#ffffff;" transform="translate(145.761 97.858125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="54.980469" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="118.359375" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="179.638672" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="207.421875" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_28"&gt;
&lt;!-- to --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 114.166125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_29"&gt;
&lt;!-- be --&gt;
&lt;g style="fill:#ffffff;" transform="translate(66.147 114.166125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 48.6875 27.296875 
Q 48.6875 37.203125 44.609375 42.84375 
Q 40.53125 48.484375 33.40625 48.484375 
Q 26.265625 48.484375 22.1875 42.84375 
Q 18.109375 37.203125 18.109375 27.296875 
Q 18.109375 17.390625 22.1875 11.75 
Q 26.265625 6.109375 33.40625 6.109375 
Q 40.53125 6.109375 44.609375 11.75 
Q 48.6875 17.390625 48.6875 27.296875 
z
M 18.109375 46.390625 
Q 20.953125 51.265625 25.265625 53.625 
Q 29.59375 56 35.59375 56 
Q 45.5625 56 51.78125 48.09375 
Q 58.015625 40.1875 58.015625 27.296875 
Q 58.015625 14.40625 51.78125 6.484375 
Q 45.5625 -1.421875 35.59375 -1.421875 
Q 29.59375 -1.421875 25.265625 0.953125 
Q 20.953125 3.328125 18.109375 8.203125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 75.984375 
L 18.109375 75.984375 
z
" id="DejaVuSans-98"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-98"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_30"&gt;
&lt;!-- good --&gt;
&lt;g style="fill:#ffffff;" transform="translate(83.454 114.166125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="185.839844" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_31"&gt;
&lt;!-- whereas --&gt;
&lt;g style="fill:#ffffff;" transform="translate(115.686 114.166125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-119"&gt;&lt;/use&gt;
&lt;use x="81.787109" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="145.166016" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="206.689453" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="245.552734" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="307.076172" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="368.355469" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_32"&gt;
&lt;!-- in --&gt;
&lt;g style="fill:#ffffff;" transform="translate(168.618 114.166125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="27.783203" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_33"&gt;
&lt;!-- Japan, --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 130.474125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 9.8125 72.90625 
L 19.671875 72.90625 
L 19.671875 5.078125 
Q 19.671875 -8.109375 14.671875 -14.0625 
Q 9.671875 -20.015625 -1.421875 -20.015625 
L -5.171875 -20.015625 
L -5.171875 -11.71875 
L -2.09375 -11.71875 
Q 4.4375 -11.71875 7.125 -8.046875 
Q 9.8125 -4.390625 9.8125 5.078125 
z
" id="DejaVuSans-74"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-74"&gt;&lt;/use&gt;
&lt;use x="29.492188" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="90.771484" xlink:href="#DejaVuSans-112"&gt;&lt;/use&gt;
&lt;use x="154.248047" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="215.527344" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="278.90625" xlink:href="#DejaVuSans-44"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_34"&gt;
&lt;!-- greens --&gt;
&lt;g style="fill:#008000;" transform="translate(91.647 130.474125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="102.339844" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="163.863281" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="225.386719" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="288.765625" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_35"&gt;
&lt;!-- and --&gt;
&lt;g style="fill:#ffffff;" transform="translate(134.979 130.474125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_36"&gt;
&lt;!-- blue --&gt;
&lt;g style="fill:#0000ff;" transform="translate(159.936 130.474125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-98"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="91.259766" xlink:href="#DejaVuSans-117"&gt;&lt;/use&gt;
&lt;use x="154.638672" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_37"&gt;
&lt;!-- are --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 146.782125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="100.142578" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_38"&gt;
&lt;!-- considered --&gt;
&lt;g style="fill:#ff0000;" transform="translate(73.647 146.782125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="54.980469" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="116.162109" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="179.541016" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;use x="231.640625" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="259.423828" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;use x="322.900391" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="384.423828" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="423.287109" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="484.810547" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_39"&gt;
&lt;!-- good --&gt;
&lt;g style="fill:#ffffff;" transform="translate(141.879 146.782125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="185.839844" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_40"&gt;
&lt;!-- and --&gt;
&lt;g style="fill:#ffffff;" transform="translate(174.111 146.782125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_41"&gt;
&lt;!-- red --&gt;
&lt;g style="fill:#ff0000;" transform="translate(51.84 163.090125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="38.863281" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="100.386719" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_42"&gt;
&lt;!-- and --&gt;
&lt;g style="fill:#ffffff;" transform="translate(73.872 163.090125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_43"&gt;
&lt;!-- purple --&gt;
&lt;g style="fill:#800080;" transform="translate(98.829 163.090125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-112"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-117"&gt;&lt;/use&gt;
&lt;use x="126.855469" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="167.96875" xlink:href="#DejaVuSans-112"&gt;&lt;/use&gt;
&lt;use x="231.445312" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="259.228516" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_44"&gt;
&lt;!-- are --&gt;
&lt;g style="fill:#ffffff;" transform="translate(139.761 163.090125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="100.142578" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_45"&gt;
&lt;!-- bad. --&gt;
&lt;g style="fill:#ffffff;" transform="translate(161.568 163.090125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-98"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="124.755859" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;use x="188.232422" xlink:href="#DejaVuSans-46"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_46"&gt;
&lt;!-- Green --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 179.398125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 59.515625 10.40625 
L 59.515625 29.984375 
L 43.40625 29.984375 
L 43.40625 38.09375 
L 69.28125 38.09375 
L 69.28125 6.78125 
Q 63.578125 2.734375 56.6875 0.65625 
Q 49.8125 -1.421875 42 -1.421875 
Q 24.90625 -1.421875 15.25 8.5625 
Q 5.609375 18.5625 5.609375 36.375 
Q 5.609375 54.25 15.25 64.234375 
Q 24.90625 74.21875 42 74.21875 
Q 49.125 74.21875 55.546875 72.453125 
Q 61.96875 70.703125 67.390625 67.28125 
L 67.390625 56.78125 
Q 61.921875 61.421875 55.765625 63.765625 
Q 49.609375 66.109375 42.828125 66.109375 
Q 29.4375 66.109375 22.71875 58.640625 
Q 16.015625 51.171875 16.015625 36.375 
Q 16.015625 21.625 22.71875 14.15625 
Q 29.4375 6.6875 42.828125 6.6875 
Q 48.046875 6.6875 52.140625 7.59375 
Q 56.25 8.5 59.515625 10.40625 
z
" id="DejaVuSans-71"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-71"&gt;&lt;/use&gt;
&lt;use x="77.490234" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="116.353516" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="177.876953" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="239.400391" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_47"&gt;
&lt;!-- is --&gt;
&lt;g style="fill:#ffffff;" transform="translate(90.597 179.398125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="27.783203" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_48"&gt;
&lt;!-- the --&gt;
&lt;g style="fill:#ffffff;" transform="translate(102.354 179.398125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="102.587891" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_49"&gt;
&lt;!-- dominant --&gt;
&lt;g style="fill:#ffffff;" transform="translate(124.386 179.398125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-109"&gt;&lt;/use&gt;
&lt;use x="222.070312" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="249.853516" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="313.232422" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="374.511719" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="437.890625" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_50"&gt;
&lt;!-- color --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 195.706125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="54.980469" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="116.162109" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="143.945312" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="205.126953" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_51"&gt;
&lt;!-- in --&gt;
&lt;g style="fill:#ffffff;" transform="translate(83.697 195.706125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="27.783203" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_52"&gt;
&lt;!-- Mongolia. --&gt;
&lt;g style="fill:#ffffff;" transform="translate(96.879 195.706125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 9.8125 72.90625 
L 24.515625 72.90625 
L 43.109375 23.296875 
L 61.8125 72.90625 
L 76.515625 72.90625 
L 76.515625 0 
L 66.890625 0 
L 66.890625 64.015625 
L 48.09375 14.015625 
L 38.1875 14.015625 
L 19.390625 64.015625 
L 19.390625 0 
L 9.8125 0 
z
" id="DejaVuSans-77"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-77"&gt;&lt;/use&gt;
&lt;use x="86.279297" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="147.460938" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="210.839844" xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;use x="274.316406" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="335.498047" xlink:href="#DejaVuSans-108"&gt;&lt;/use&gt;
&lt;use x="363.28125" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="391.064453" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="452.34375" xlink:href="#DejaVuSans-46"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_53"&gt;
&lt;!-- It --&gt;
&lt;g style="fill:#ffffff;" transform="translate(157.311 195.706125)scale(0.12 -0.12)"&gt;
&lt;defs&gt;
&lt;path d="M 9.8125 72.90625 
L 19.671875 72.90625 
L 19.671875 0 
L 9.8125 0 
z
" id="DejaVuSans-73"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;use xlink:href="#DejaVuSans-73"&gt;&lt;/use&gt;
&lt;use x="29.492188" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_54"&gt;
&lt;!-- might --&gt;
&lt;g style="fill:#ffffff;" transform="translate(167.868 195.706125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-109"&gt;&lt;/use&gt;
&lt;use x="97.412109" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="125.195312" xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;use x="188.671875" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="252.050781" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_55"&gt;
&lt;!-- be --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 212.014125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-98"&gt;&lt;/use&gt;
&lt;use x="63.476562" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_56"&gt;
&lt;!-- a --&gt;
&lt;g style="fill:#ffffff;" transform="translate(69.147 212.014125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_57"&gt;
&lt;!-- sign --&gt;
&lt;g style="fill:#ffffff;" transform="translate(78.804 212.014125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;use x="52.099609" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="79.882812" xlink:href="#DejaVuSans-103"&gt;&lt;/use&gt;
&lt;use x="143.359375" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_58"&gt;
&lt;!-- of --&gt;
&lt;g style="fill:#ffffff;" transform="translate(105.861 212.014125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="61.181641" xlink:href="#DejaVuSans-102"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_59"&gt;
&lt;!-- their --&gt;
&lt;g style="fill:#ffffff;" transform="translate(119.718 212.014125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="102.587891" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="164.111328" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="191.894531" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_60"&gt;
&lt;!-- appreciation --&gt;
&lt;g style="fill:#ffffff;" transform="translate(150.075 212.014125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-112"&gt;&lt;/use&gt;
&lt;use x="124.755859" xlink:href="#DejaVuSans-112"&gt;&lt;/use&gt;
&lt;use x="188.232422" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="227.095703" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;use x="288.619141" xlink:href="#DejaVuSans-99"&gt;&lt;/use&gt;
&lt;use x="343.599609" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="371.382812" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="432.662109" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="471.871094" xlink:href="#DejaVuSans-105"&gt;&lt;/use&gt;
&lt;use x="499.654297" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="560.835938" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_61"&gt;
&lt;!-- towards --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 228.322125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-111"&gt;&lt;/use&gt;
&lt;use x="100.390625" xlink:href="#DejaVuSans-119"&gt;&lt;/use&gt;
&lt;use x="182.177734" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="243.457031" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="282.820312" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;use x="346.296875" xlink:href="#DejaVuSans-115"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_62"&gt;
&lt;!-- the --&gt;
&lt;g style="fill:#ffffff;" transform="translate(102.072 228.322125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="39.208984" xlink:href="#DejaVuSans-104"&gt;&lt;/use&gt;
&lt;use x="102.587891" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_63"&gt;
&lt;!-- nature --&gt;
&lt;g style="fill:#ffffff;" transform="translate(124.104 228.322125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="63.378906" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-116"&gt;&lt;/use&gt;
&lt;use x="163.867188" xlink:href="#DejaVuSans-117"&gt;&lt;/use&gt;
&lt;use x="227.246094" xlink:href="#DejaVuSans-114"&gt;&lt;/use&gt;
&lt;use x="266.109375" xlink:href="#DejaVuSans-101"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_64"&gt;
&lt;!-- and --&gt;
&lt;g style="fill:#ffffff;" transform="translate(165.936 228.322125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="61.279297" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="124.658203" xlink:href="#DejaVuSans-100"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_65"&gt;
&lt;!-- fauna. --&gt;
&lt;g style="fill:#ffffff;" transform="translate(51.84 244.630125)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#DejaVuSans-102"&gt;&lt;/use&gt;
&lt;use x="35.205078" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="96.484375" xlink:href="#DejaVuSans-117"&gt;&lt;/use&gt;
&lt;use x="159.863281" xlink:href="#DejaVuSans-110"&gt;&lt;/use&gt;
&lt;use x="223.242188" xlink:href="#DejaVuSans-97"&gt;&lt;/use&gt;
&lt;use x="284.521484" xlink:href="#DejaVuSans-46"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="visualisation"></category></entry><entry><title>Define Functions Iteratively With Python</title><link href="https://jackmckew.dev/define-functions-iteratively-with-python.html" rel="alternate"></link><published>2021-01-01T00:00:00+11:00</published><updated>2021-01-01T00:00:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2021-01-01:/define-functions-iteratively-with-python.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;An interesting problem came up recently, there was a piece of code absolutely full of the same function calls over and over again, meaning if anything ever need to change, that would have to be changed in over 500 places, not ideal. Thoughts go back to single responsbility, and don't …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;An interesting problem came up recently, there was a piece of code absolutely full of the same function calls over and over again, meaning if anything ever need to change, that would have to be changed in over 500 places, not ideal. Thoughts go back to single responsbility, and don't repeat yourself principles for software engineering. So research &amp;amp; thinking begun on the best way to manage this issue. The first thing that came to mind, how could we define these functions and their combinations iteratively.&lt;/p&gt;
&lt;p&gt;Before we dive into this could be implemented, we need to really understand the problem.&lt;/p&gt;
&lt;p&gt;The use case for this repeated code, was to check the variables being passed to an endpoint were what they were expected to be. For example, if an endpoint is awaiting for a string, and an optional number, we want to check these before the operation goes through and potentially breaks something else down the line (bringing us back to the crash early principle).&lt;/p&gt;
&lt;p&gt;We'll start by defining two functions which will check that a variable is the type it's expected to be, and another to ensure it exists (not None in Python).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;variable_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Variable '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' is invalid type! Expected: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;variable_type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Variable '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' is None! Check variable exists."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now that we've defined these functions, let's test that they work as expected and raise Exceptions when a problem statement comes up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;check_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'lucky_number'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;check_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello world'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'I thought this was a number'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;&lt;span class="ansi-red-intense-fg ansi-bold"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-intense-fg ansi-bold"&gt;Exception&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;&amp;lt;ipython-input-10-bb70c914c0df&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      1&lt;/span&gt; check_type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;&lt;span class="ansi-cyan-intense-fg ansi-bold"&gt;24&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt;int&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;'lucky_number'&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;----&amp;gt; 2&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt; &lt;/span&gt;check_type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;'Hello world'&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt; float&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt; &lt;span class="ansi-blue-intense-fg ansi-bold"&gt;'I thought this was a number'&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-intense-fg ansi-bold"&gt;&amp;lt;ipython-input-6-22c582f36d19&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;check_type&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;(value, variable_type, variable_name)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      1&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;def&lt;/span&gt; check_type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;value&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt; variable_type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt; variable_name&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      2&lt;/span&gt;     &lt;span class="ansi-green-intense-fg ansi-bold"&gt;if&lt;/span&gt; type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;value&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt; &lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;!=&lt;/span&gt; variable_type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;----&amp;gt; 3&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;         &lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;raise&lt;/span&gt; Exception&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;f"Variable '{variable_name}' is invalid type! Expected: {variable_type}."&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      4&lt;/span&gt; 
&lt;span class="ansi-green-fg"&gt;      5&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;def&lt;/span&gt; check_exists&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;value&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt;variable_name&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;

&lt;span class="ansi-red-intense-fg ansi-bold"&gt;Exception&lt;/span&gt;: Variable 'I thought this was a number' is invalid type! Expected: &amp;lt;class 'float'&amp;gt;.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;check_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'Fifty five'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;check_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Fifty six'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;&lt;span class="ansi-red-intense-fg ansi-bold"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-intense-fg ansi-bold"&gt;Exception&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;&amp;lt;ipython-input-11-355540618803&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      2&lt;/span&gt; y &lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;=&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;None&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      3&lt;/span&gt; check_exists&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;x&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;'Fifty five'&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;----&amp;gt; 4&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt; &lt;/span&gt;check_exists&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;y&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt; &lt;span class="ansi-blue-intense-fg ansi-bold"&gt;'Fifty six'&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-intense-fg ansi-bold"&gt;&amp;lt;ipython-input-6-22c582f36d19&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;check_exists&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;(value, variable_name)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      5&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;def&lt;/span&gt; check_exists&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;value&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt;variable_name&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      6&lt;/span&gt;     &lt;span class="ansi-green-intense-fg ansi-bold"&gt;if&lt;/span&gt; value &lt;span class="ansi-green-intense-fg ansi-bold"&gt;is&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;None&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;----&amp;gt; 7&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;         &lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;raise&lt;/span&gt; Exception&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;f"Variable '{variable_name}' is None! Check variable exists."&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;

&lt;span class="ansi-red-intense-fg ansi-bold"&gt;Exception&lt;/span&gt;: Variable 'Fifty six' is None! Check variable exists.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Defining-Functions-Iteratively"&gt;Defining Functions Iteratively&lt;a class="anchor-link" href="#Defining-Functions-Iteratively"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now let's make use of the beauty that is looping to create all the combinations for us to use! We're going to encapsulate all these functions inside a dictionary to encapsulate them and provide a common interface for developers to use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [140]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_and_raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Add logging here&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_validators&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;validators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variable_type&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;variable_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;variable_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;variable_type&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;log_and_raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Variable isn't of type '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;variable_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'! D:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;

&lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_validators&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now in a handful lines of code, we've created a dictionary with a way to easily generate functions to check variable types, and then log out the error (eg, write to a file) and raise an exception.&lt;/p&gt;
&lt;p&gt;Before we deconstruct what's happening here, let's see it in action.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [141]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'str'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s1"&gt;'This is a string!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'float'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mf"&gt;42.42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The number forty two'&lt;/span&gt;

&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'str'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[141]:&lt;/div&gt;
&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;'The number forty two'&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Fantastic, as we can see, it's not throwing any errors and continuing through our validations, now let's ensure our exception is raised (and subsequently any logging would be completed).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [142]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'str'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;&lt;span class="ansi-red-intense-fg ansi-bold"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-intense-fg ansi-bold"&gt;Exception&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;&amp;lt;ipython-input-142-fd464241a319&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt; &lt;/span&gt;validate&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;[&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;'str'&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;]&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;&lt;span class="ansi-cyan-intense-fg ansi-bold"&gt;42&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-intense-fg ansi-bold"&gt;&amp;lt;ipython-input-140-4899cd219b78&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;lambda&amp;gt;&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;(value, variable_type)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      6&lt;/span&gt;     validators &lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;=&lt;/span&gt; &lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;{&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;}&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      7&lt;/span&gt;     &lt;span class="ansi-green-intense-fg ansi-bold"&gt;for&lt;/span&gt; variable_type &lt;span class="ansi-green-intense-fg ansi-bold"&gt;in&lt;/span&gt; types&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;----&amp;gt; 8&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;         &lt;/span&gt;validators&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;[&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;f"{variable_type.__name__}"&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;]&lt;/span&gt; &lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;=&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;lambda&lt;/span&gt; value&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;,&lt;/span&gt; variable_type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;=&lt;/span&gt;variable_type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt; value &lt;span class="ansi-green-intense-fg ansi-bold"&gt;if&lt;/span&gt; type&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;value&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt; &lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;==&lt;/span&gt; variable_type &lt;span class="ansi-green-intense-fg ansi-bold"&gt;else&lt;/span&gt; log_and_raise&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;f"Variable isn't of type '{variable_type.__name__}'! D:"&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      9&lt;/span&gt;     &lt;span class="ansi-green-intense-fg ansi-bold"&gt;return&lt;/span&gt; validators
&lt;span class="ansi-green-fg"&gt;     10&lt;/span&gt; 

&lt;span class="ansi-green-intense-fg ansi-bold"&gt;&amp;lt;ipython-input-140-4899cd219b78&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;log_and_raise&lt;/span&gt;&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;(exception_text)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      1&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;def&lt;/span&gt; log_and_raise&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;exception_text&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      2&lt;/span&gt;     &lt;span class="ansi-red-intense-fg ansi-bold"&gt;# Add logging here&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;----&amp;gt; 3&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;     &lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;raise&lt;/span&gt; Exception&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;exception_text&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;      4&lt;/span&gt; 
&lt;span class="ansi-green-fg"&gt;      5&lt;/span&gt; &lt;span class="ansi-green-intense-fg ansi-bold"&gt;def&lt;/span&gt; create_validators&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;(&lt;/span&gt;types&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;)&lt;/span&gt;&lt;span class="ansi-yellow-intense-fg ansi-bold"&gt;:&lt;/span&gt;

&lt;span class="ansi-red-intense-fg ansi-bold"&gt;Exception&lt;/span&gt;: Variable isn't of type 'str'! D:&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Even better, we get raise an exception when our validation fails ensuring to alert the developers with information about why it failed. Now let's deconstruct how we created it in depth.&lt;/p&gt;
&lt;h3 id="Deconstruction-of-How"&gt;Deconstruction of How&lt;a class="anchor-link" href="#Deconstruction-of-How"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Admittedly, there's a lot going on in those handful of lines which isn't obvious as to whats happening.&lt;/p&gt;
&lt;p&gt;First we define the overarching functions which contains the creation of all these functions, and thereafter initialise a dictionary to store all the following functions within. Next we loop over each of the types provided as a list to the function to create an entry in the dictionary using the &lt;code&gt;__name__&lt;/code&gt; dunder function (eg, &lt;code&gt;str&lt;/code&gt; has a dunder &lt;code&gt;__name__&lt;/code&gt; of 'str'), this let's our developers use the type they want as the key of the dictionary when wanting to validate a variables type.&lt;/p&gt;
&lt;h3 id="Lambdas!"&gt;Lambdas!&lt;a class="anchor-link" href="#Lambdas!"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The trickiest part here is how we are actually defining the functions. We make use of the lambda operator in Python to create &lt;strong&gt;anonymous functions&lt;/strong&gt;. The structure of a lambda function definition follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true_statement&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;conditional_statement&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;false_statement&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We make use of a keyword argument of the &lt;code&gt;variable_type&lt;/code&gt; in our loop otherwise the &lt;code&gt;variable_type&lt;/code&gt; from the list passed in won't be correctly passed into the lambda function (which we won't discuss in this post).&lt;/p&gt;
&lt;p&gt;Finally we make use of an external function to centralise how we handle errors (making it easy to keep a consistent logging approach), and raise an Exception within that function to ensure any logging occurs before the program ultimately exits.&lt;/p&gt;
&lt;h2 id="Conclusion"&gt;Conclusion&lt;a class="anchor-link" href="#Conclusion"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are pros and cons to this approach to this problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concise way of creating lots of functions&lt;/li&gt;
&lt;li&gt;Consistent interface to use&lt;/li&gt;
&lt;li&gt;Stores all similar functions inside one object (dictionary)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not straightforward as to how it works&lt;/li&gt;
&lt;li&gt;Not straightforward to change functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="software-development"></category></entry><entry><title>Differential Privacy</title><link href="https://jackmckew.dev/differential-privacy.html" rel="alternate"></link><published>2020-12-18T00:00:00+11:00</published><updated>2020-12-18T00:00:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-12-18:/differential-privacy.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;It's quite clear in today's age that the biggest companies in the world, make most of their profits from harvesting and productionalising their user's data. With privacy becoming more and more of a concern in everyday life as we become more connected, it's almost becoming a human right for our …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;It's quite clear in today's age that the biggest companies in the world, make most of their profits from harvesting and productionalising their user's data. With privacy becoming more and more of a concern in everyday life as we become more connected, it's almost becoming a human right for our privacy to be protected, especially by those who profit from it.&lt;/p&gt;
&lt;p&gt;Differential privacy in particular is a model that aims to protect the data's owners against bad actors reversing the aggregated data to find details of individual users.&lt;/p&gt;
&lt;p&gt;For the example in this post, we will use a dataset that includes each persons name, age, email and annual income. In this example, say we wanted to determine how many people in our dataset make over $50,000 annually. Instead of sharing all of the specific people and their incomes, we would rather share the aggregate data. Someone viewing our results might know that 30% of our set make over that threshold, but not which people.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;,  let's say someone viewing the results wants to know the specific income of one person. To do this, they've gone and collected the background information on every person except the person of interest to them. If they know which of the 4999 people make over the threshold, they can determine whether the person of question makes over or under the threshold.&lt;/p&gt;
&lt;p&gt;This type of attack is known as a differentiated attack, and is very difficult to protect against, and is what differential privacy aims to defend against. The primary method of achieving privacy is by adding random noise to the aggregate data (the private key in a sense of cryptography). In our example from above our results might say 27% - 32% of people make over the threshold rather than the specific number. This still achieves an outcome that people can understand the results, but protects the privacy of the users within it.&lt;/p&gt;
&lt;p&gt;Now let's use the following packages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mimesis&lt;/code&gt; to generate the user data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt; to calculate the exact values (statistical analysis)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pydp&lt;/code&gt; to calculate the same values but maintaining privacy of the users&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pydp&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dp&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydp.algorithms.laplacian&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BoundedSum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BoundedMean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mimesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mimesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Address&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mimesis.enums&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Gender&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mimesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Datetime&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;addess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Datetime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_rows_mimesis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_of_rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s2"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s2"&gt;"income"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_of_rows&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;


&lt;span class="n"&gt;income_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_rows_mimesis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;income_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[1]:&lt;/div&gt;
&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped=""&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="table dataframe table-striped"&gt;
&lt;thead&gt;
&lt;tr style="text-align: right;"&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;email&lt;/th&gt;
&lt;th&gt;income&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;Fidel Burnett&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;aquaria1999@gmail.com&lt;/td&gt;
&lt;td&gt;53435&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;Felipe Norman&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;labradoodle1933@outlook.com&lt;/td&gt;
&lt;td&gt;72310&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;Jeremiah Valentine&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;arcanist2068@yahoo.com&lt;/td&gt;
&lt;td&gt;20600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;Stuart Fitzpatrick&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;uniembryonate1938@live.com&lt;/td&gt;
&lt;td&gt;45444&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;Kim Hubbard&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;td&gt;dutiful2019@protonmail.com&lt;/td&gt;
&lt;td&gt;95098&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;...&lt;/th&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4995&lt;/th&gt;
&lt;td&gt;Heath Barrera&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;booby1892@live.com&lt;/td&gt;
&lt;td&gt;71771&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4996&lt;/th&gt;
&lt;td&gt;Nadene Flynn&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;mitten1812@yahoo.com&lt;/td&gt;
&lt;td&gt;59993&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4997&lt;/th&gt;
&lt;td&gt;Francisco Phillips&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;vaucheriaceous1908@gmail.com&lt;/td&gt;
&lt;td&gt;86981&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4998&lt;/th&gt;
&lt;td&gt;Claud Puckett&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;prefavorably1893@gmail.com&lt;/td&gt;
&lt;td&gt;97025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4999&lt;/th&gt;
&lt;td&gt;Claris Foster&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;dhava1876@outlook.com&lt;/td&gt;
&lt;td&gt;33015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5000 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Calculate count with no differential privacy&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;typical_count_above&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;number_over_threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typical_count_above&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'income'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Number of users with income over $50,000: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number_over_threshold&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; or &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_over_threshold&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.1f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Number of users with income over $50,000: 2810 or 56.2%
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;As we can see from the calculations above, &lt;code&gt;typical_count_above&lt;/code&gt; counts the number of users over a limit for a specified column with no preservation of privacy whatsoever.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Calculate count with differential privacy&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;private_count_above&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;privacy_budget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;privacy_budget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quick_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="n"&gt;private_number_over_threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;private_count_above&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'income'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"PRIVATE: Number of users with income over $50,000: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;private_number_over_threshold&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; or &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;private_number_over_threshold&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.1f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;PRIVATE: Number of users with income over $50,000: 2809 or 56.2%
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The &lt;code&gt;private_count_above&lt;/code&gt; function works very similarly to &lt;code&gt;typical_count_above&lt;/code&gt; but using the Differential Privacy Library by Google to count the number of users above the limit and preserves privacy by using the Laplacian mechanism for adding noise to the dataset. Also note that we are able to tune the privacy budget for the acceptable loss of privacy, with 0 denoting no loss whatsoever is acceptable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Mean-Example"&gt;Mean Example&lt;a class="anchor-link" href="#Mean-Example"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now let's repeat the same example, but by determining the average income across all users in the dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Calculate mean with no differential privacy&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;typical_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Calculate mean with differential privacy&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;private_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;privacy_budget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BoundedMean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;privacy_budget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quick_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;income_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="n"&gt;true_mean_income&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typical_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'income'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;private_mean_income&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;private_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'income'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"True mean income: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;true_mean_income&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Private mean income: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;private_mean_income&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, 0.8 privacy budget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Private mean income: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;private_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'income'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, 0.1 privacy budget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;True mean income: 55467.1134
Private mean income: 55470.37580603853, 0.8 privacy budget
Private mean income: 55589.33064063336, 0.1 privacy budget
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;As we can see from the above while the outcome achieves the same result, we have protected the users privacy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Data Science"></category><category term="datascience"></category><category term="python"></category></entry><entry><title>Property Based Testing in Python</title><link href="https://jackmckew.dev/property-based-testing-in-python.html" rel="alternate"></link><published>2020-10-16T00:00:00+11:00</published><updated>2020-10-16T00:00:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-10-16:/property-based-testing-in-python.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Building software can be challenging, but maintaining it after that initial build can be even moreso. Being able to test the software such that it verifies the software behaves as expected is crucial in building robust software applications that users depend upon, being able to automate this testing is even …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Building software can be challenging, but maintaining it after that initial build can be even moreso. Being able to test the software such that it verifies the software behaves as expected is crucial in building robust software applications that users depend upon, being able to automate this testing is even better! There's other blog posts on this blog around the topic of testing &lt;a href="https://jackmckew.dev/introduction-to-pytest-pipenv.html"&gt;Introduction to Pytest &amp;amp; Pipenv&lt;/a&gt;, but for this post we're going to focus on a very specific type of testing, &lt;strong&gt;property based testing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Property based testing differs itself from the conventional example based testing by being able to generate the test data that drives your tests, and even better, can help find the boundaries of where the tests fail.&lt;/p&gt;
&lt;p&gt;To demonstrate the power of property based testing, we're going to build some testing for the old faithful multiplication operator in Python.&lt;/p&gt;
&lt;p&gt;To help with this, we are going to use a few packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pytest (testing framework)&lt;/li&gt;
&lt;li&gt;hypothesis (property testing package)&lt;/li&gt;
&lt;li&gt;ipytest (to enable running tests in jupyter notebooks)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we dive in, let's set up ipytest and use some &lt;strong&gt;example-based testing&lt;/strong&gt; to verify the multiplication operator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ipytest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="n"&gt;ipytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoconfig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number_1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;number_2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;run_pytest&lt;/span&gt;[clean]

def test_example():
    assert multiply(3,3) == 9
    assert multiply(5,5) == 25
    assert multiply(4,6) == 24
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;.                                                                        [100%]
1 passed in 0.02s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Fantastic, our examples passed the test! Now let's ensure that the test fails.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;run_pytest&lt;/span&gt;[clean]

def test_fail_example():
    assert multiply(3,3) == 9
    assert multiply(3,5) == 150
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;F                                                                        [100%]
================================== FAILURES ===================================
______________________________ test_fail_example ______________________________

    def test_fail_example():
        assert multiply(3,3) == 9
&amp;gt;       assert multiply(3,5) == 150
E       assert 15 == 150
E        +  where 15 = multiply(3, 5)

&amp;lt;ipython-input-7-212df0aaa8ed&amp;gt;:3: AssertionError
=========================== short test summary info ===========================
FAILED tmpg6kq2sek.py::test_fail_example - assert 15 == 150
1 failed in 0.34s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Perfect! We can see that the test fails as expected and even nicely tells us which line of code it failed on. Let's say we had lots of these examples that we wanted to test for, so to simplify it we could potentially use pytest's &lt;strong&gt;parametrize&lt;/strong&gt; decorator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;run_pytest&lt;/span&gt;[clean]

@pytest.mark.parametrize('number_1, number_2 , expected', [
    (3,3,9),
    (5,5,25),
    (4,6,24)
])
def test_multiply(number_1,number_2,expected):
    assert expected == multiply(number_1,number_2)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;...                                                                      [100%]
3 passed in 0.02s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Is this enough testing to verify our function? Really, we're only testing a few conditions that we'd expect to work, but in reality it's the ones that nobody foresees that would be ideal to capture in our tests. This also raises a few more things, the developer writing the tests may choose to write 2 or 2000 test cases but this doesn't guarantee anything when it comes to if it's truly covered.&lt;/p&gt;
&lt;h2 id="Introduce-Property-Based-Testing"&gt;Introduce Property Based Testing&lt;a class="anchor-link" href="#Introduce-Property-Based-Testing"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Property based testing is considered as generative testing, we don't supply specific examples with inputs and expected outputs. Rather we define certain properties and generate randomized inputs to ensure the properties are correct. In addition to this, property based testing can also &lt;code&gt;shrink&lt;/code&gt; outputs to find the exact boundary condition where a test fails.&lt;/p&gt;
&lt;p&gt;While this doesn't 100% replace example-based testing, they definitely have their use and have a lot of potential for effective testing. Now let's implement the same tests above, using property based testing with &lt;code&gt;hypothesis&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hypothesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;st&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;run_pytest&lt;/span&gt;[clean]

@given(st.integers(),st.integers())
def test_multiply(number_1,number_2):
    assert multiply(number_1,number_2) == number_1 * number_2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;.                                                                        [100%]
1 passed in 0.14s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Note that we've used the &lt;code&gt;given&lt;/code&gt; decorator which makes our test parametrized, and use strategies which cover the types of input data to generate. As per the hypothesis documentation &lt;em&gt;Most things should be easy to generate and everything should be possible&lt;/em&gt;, we can find more information on them here: &lt;a href="https://hypothesis.readthedocs.io/en/latest/data.html"&gt;https://hypothesis.readthedocs.io/en/latest/data.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now this doesn't look any different to last time, so what even changed! Let's change our multiply function so it behaves strangely and see if we can see hypothesis shrink the failures in action. Shrinking is whenever it finds a failure, it'll try to get to the absolute boundary case to help us find the potential cause and even better it'll remember this failure for next time so it doesn't poke it's head up again!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bad_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number_1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number_2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number_1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;number_2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;run_pytest&lt;/span&gt;[clean]

@given(st.integers(),st.integers())
def test_bad_multiply(number_1,number_2):
    assert bad_multiply(number_1,number_2) == number_1 * number_2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;F                                                                        [100%]
================================== FAILURES ===================================
______________________________ test_bad_multiply ______________________________

    @given(st.integers(),st.integers())
&amp;gt;   def test_bad_multiply(number_1,number_2):

&amp;lt;ipython-input-16-3e2ec463c8ad&amp;gt;:2: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

number_1 = 31, number_2 = 1

    @given(st.integers(),st.integers())
    def test_bad_multiply(number_1,number_2):
&amp;gt;       assert bad_multiply(number_1,number_2) == number_1 * number_2
E       assert 0 == (31 * 1)
E        +  where 0 = bad_multiply(31, 1)

&amp;lt;ipython-input-16-3e2ec463c8ad&amp;gt;:3: AssertionError
--------------------------------- Hypothesis ----------------------------------
Falsifying example: test_bad_multiply(
    number_1=31, number_2=1,
)
=========================== short test summary info ===========================
FAILED tmp8uis7_kv.py::test_bad_multiply - assert 0 == (31 * 1)
1 failed in 0.22s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Fantastic, we can see that the failure has been shrunken to &lt;code&gt;number_1&lt;/code&gt; being 31 and &lt;code&gt;number_2&lt;/code&gt; being 1 which is one integer off the 'bad' boundary conditions we'd introduced into the multiply function.&lt;/p&gt;
&lt;p&gt;Hopefully this has introduced the power of property based testing and can help make software more robust for everyone!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="software-development"></category></entry><entry><title>Shallow vs Deep Copy in Python</title><link href="https://jackmckew.dev/shallow-vs-deep-copy-in-python.html" rel="alternate"></link><published>2020-10-09T00:00:00+11:00</published><updated>2020-10-09T00:00:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-10-09:/shallow-vs-deep-copy-in-python.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Shallow-vs-Deep-Copy-in-Python"&gt;Shallow vs Deep Copy in Python&lt;a class="anchor-link" href="#Shallow-vs-Deep-Copy-in-Python"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One of the utmost crucial parts in all programming languages is maintaining variables. We create, modify, compare, delete our variables to build more complex systems that eventually make up the software we use. This is typically done by using the &lt;code&gt;=&lt;/code&gt; operator (eg &lt;code&gt;x = 5 …&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Shallow-vs-Deep-Copy-in-Python"&gt;Shallow vs Deep Copy in Python&lt;a class="anchor-link" href="#Shallow-vs-Deep-Copy-in-Python"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One of the utmost crucial parts in all programming languages is maintaining variables. We create, modify, compare, delete our variables to build more complex systems that eventually make up the software we use. This is typically done by using the &lt;code&gt;=&lt;/code&gt; operator (eg &lt;code&gt;x = 5&lt;/code&gt;), but sometimes this doesn't always do what we expect. This is going to be a deep  dive into different types of &lt;code&gt;copy&lt;/code&gt; in Python.&lt;/p&gt;
&lt;p&gt;When we say &lt;code&gt;x = 5&lt;/code&gt;, we're actually not creating a new object (as in object oriented software), we're creating a binding between a target and an object. We can see this in action by using the &lt;code&gt;id()&lt;/code&gt; function on our variables to see the 'identity' of an object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;140711684720416
140711684720416
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;As we can see, both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; share an 'identity' meaning they are both the same object and the variable is merely a 'pointer' to the right object.&lt;/p&gt;
&lt;p&gt;But sometimes we actually want to create a new object, and this comes into using the &lt;code&gt;copy&lt;/code&gt; module. But even with &lt;code&gt;copy&lt;/code&gt; there's still 2 types of copy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shallow copy&lt;/li&gt;
&lt;li&gt;deep copy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's take a look at this a bit closer, we'll start by creating a list (an object itself), with some integer elements and an embedded list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A contents: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;A contents:  [1, 2, [3, 4], 5]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now similar to our &lt;code&gt;x = 5&lt;/code&gt; example before, let's assign a new variable &lt;code&gt;B&lt;/code&gt; and set it to &lt;code&gt;A&lt;/code&gt; to see what happens to the identities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A's object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"B's object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;A's object id is 2392779886784
B's object id is 2392779886784
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Funnily enough, the ids are the same! Meaning they are both the same object. This would mean if we were to modify the contents of the elements in &lt;code&gt;A&lt;/code&gt;, the same modifications would be made in &lt;code&gt;B&lt;/code&gt;, which is not obvious.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Let's modify A[2][0] = 100"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A contents: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B contents: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Is A == B? "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Let's modify A[2][0] = 100
A contents:  [1, 2, [100, 4], 5]
B contents:  [1, 2, [100, 4], 5]
Is A == B?  True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now if we were trying to use &lt;code&gt;B&lt;/code&gt; as a separate entity to &lt;code&gt;A&lt;/code&gt; this could cause all sorts of grief, and be very difficult to track down.&lt;/p&gt;
&lt;p&gt;Let's reset our variable(s) back to it's original state so we can see how shallow &amp;amp; deep copies could change this behaviour.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Let's reset A[2][0] = 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Let's reset A[2][0] = 3
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Shallow-Copy"&gt;Shallow Copy&lt;a class="anchor-link" href="#Shallow-Copy"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A's object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"C's object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;A's object id is 2392779886784
C's object id is 2392779896256
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Fantastic! Now we can see that our &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; have separate identities, now we would expect this to behave like separate entities, right? Unfortunately not, while this does have a use case, the contents inside the list still have matching identities, meaning if we modify the contents of &lt;code&gt;C&lt;/code&gt;, it'll be reflected in &lt;code&gt;A&lt;/code&gt;, again a not obvious behaviour. But this is known as a shallow copy, meaning a new object is created but it still references the original data.&lt;/p&gt;
&lt;p&gt;Let's demonstrate this by modifying one of the elements, and seeing if it's reflected in both variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A[2][0]'s object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"C[2][0]'s object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Let's modify C[2][0] = 100 (note if this was not an embedded list this will creates a new instance of the C[0] element and won't update original list)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A contents: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C contents: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Is A == C? "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Is A[2][0] == C[2][0]? "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;A[2][0]'s object id is 140711684720352
C[2][0]'s object id is 140711684720352
Let's modify C[2][0] = 100 (note if this was not an embedded list this will creates a new instance of the C[0] element and won't update original list)
A contents:  [1, 2, [100, 4], 5]
C contents:  [1, 2, [100, 4], 5]
Is A == C?  True
Is A[2][0] == C[2][0]?  True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;But why are we using an embedded list specifically? This is one percularity, that like most things in this blog post, isn't obvious. Note that if we modified the contents of an element in the shallow copy that was an integer, it wou;dn't be reflected in both variables. Let's try this out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A[1]'s object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"C[1]'s object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Let's modify C[1] = 100"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A contents: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C contents: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Is A == C? "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Is A[1] == C[1]? "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;A[1]'s object id is 140711684720320
C[1]'s object id is 140711684720320
Let's modify C[1] = 100
A contents:  [1, 2, [100, 4], 5]
C contents:  [1, 100, [100, 4], 5]
Is A == C?  False
Is A[1] == C[1]?  False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is due to the fact that the only difference between shallow and deep copies is for compound objects (objects that contain other objects, like lists within lists).&lt;/p&gt;
&lt;p&gt;Next let's reset our list, and take a look at deep copy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Let's reset A[2][0] = 3 and A[1] = 2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Let's reset A[2][0] = 3 and A[1] = 2
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Deep-Copy"&gt;Deep Copy&lt;a class="anchor-link" href="#Deep-Copy"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now we're at the deep copy, and as we'd expect it creates a completely new object, and recursively creates new objects for embedded objects (compound objects). This means when we edit anything inside one of these compound objects, the changes won't be reflected in the other object as we'd sometimes originally expect. Let's demonstrate this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Let's do a deep copy"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A's object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"D's object id is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Let's modify A[2][0] = 100"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Let's do a deep copy
A's object id is 2392779886784
D's object id is 2392779846656
Let's modify A[2][0] = 100
[1, 2, [100, 4], 5]
[1, 2, [3, 4], 5]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Hopefully being aware of how the default behaviour works, and the potential solutions will help when debugging strange behaviour when using variables in Python!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Data Science"></category><category term="datascience"></category><category term="python"></category></entry></feed>